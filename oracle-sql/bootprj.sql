
drop table member_role;
drop table board_upload_file;
drop table role;
drop table reply;
drop table board;
drop table member;
drop table board_Team;

/* BOARD */
CREATE TABLE BOARD (
   BOARD_ID NUMBER NOT NULL, /* BOARD_ID */
   TEAM_ID NUMBER, /* TEAM_ID */
   TITLE VARCHAR2(500) NOT NULL, /* TITLE */
   CONTENT CLOB, /* CONTENT */
   WRITE_DATE DATE NOT NULL, /* WRITE_DATE */
   UPDATE_DATE DATE, /* UPDATE_DATE */
   READ_NUM NUMBER, /* READ_NUM */
   MEMBER_ID VARCHAR2(50) /* MEMBER_ID */
);

CREATE UNIQUE INDEX PK_BOARD_BOARD_ID
   ON BOARD (
      BOARD_ID ASC
   );

ALTER TABLE BOARD
   ADD
      CONSTRAINT PK_BOARD_BOARD_ID
      PRIMARY KEY (
         BOARD_ID
      );

/* BOARD_TEAM */
CREATE TABLE BOARD_TEAM (
   TEAM_ID NUMBER NOT NULL /* TEAM_ID */
);

CREATE UNIQUE INDEX PK_BOARD_CATEGORY_ID
   ON BOARD_TEAM (
      TEAM_ID ASC
   );

--CREATE UNIQUE INDEX UIX_BOARD_TEAM
--   ON BOARD_TEAM (
--   );

ALTER TABLE BOARD_TEAM
   ADD
      CONSTRAINT PK_BOARD_CATEGORY_ID
      PRIMARY KEY (
         TEAM_ID
      );

--ALTER TABLE BOARD_TEAM
--   ADD
--      CONSTRAINT UK_BOARD_CATEGORY_NAME
--      UNIQUE (
--      );

/* BOARD_UPLOAD_FILE */
CREATE TABLE BOARD_UPLOAD_FILE (
   FILE_ID NUMBER NOT NULL, /* FILE_ID */
   BOARD_ID NUMBER, /* BOARD_ID */
   FILE_NAME VARCHAR2(235), /* FILE_NAME */
   FILE_SIZE NUMBER, /* FILE_SIZE */
   FILE_CONTENT_TYPE VARCHAR2(500), /* FILE_CONTENT_TYPE */
   FILE_DATA BLOB /* FILE_DATA */
);

CREATE UNIQUE INDEX PK_BOARD_FILE_ID
   ON BOARD_UPLOAD_FILE (
      FILE_ID ASC
   );

ALTER TABLE BOARD_UPLOAD_FILE
   ADD
      CONSTRAINT PK_BOARD_FILE_ID
      PRIMARY KEY (
         FILE_ID
      );

/* MEMBER */
CREATE TABLE MEMBER (
   MEMBER_ID VARCHAR2(50) NOT NULL, /* MEMBER_ID */
   NAME VARCHAR2(50) NOT NULL, /* NAME */
   PASSWORD VARCHAR2(70) NOT NULL, /* PASSWORD */
   EMAIL VARCHAR2(100) NOT NULL, /* EMAIL */
   PHONE VARCHAR2(50), /* PHONE */
   BIRTH VARCHAR2(50), /* BIRTH */
   TEAM NUMBER, /* TEAM */
   TEAM_ID NUMBER /* TEAM_ID */
);

CREATE UNIQUE INDEX PK_MEMBER
   ON MEMBER (
      MEMBER_ID ASC
   );

CREATE UNIQUE INDEX UK_MEMBER_EMAIL
   ON MEMBER (
      EMAIL ASC
   );

ALTER TABLE MEMBER
   ADD
      CONSTRAINT PK_MEMBER
      PRIMARY KEY (
         MEMBER_ID
      );

ALTER TABLE MEMBER
   ADD
      CONSTRAINT UK_MEMBER_EMAIL
      UNIQUE (
         EMAIL
      );

/* REPLY */
CREATE TABLE REPLY (
   REPLY_ID NUMBER NOT NULL, /* REPLY_ID */
   CONTENT CLOB, /* CONTENT */
   WRITE_DATE DATE, /* WRITE_DATE */
   BOARD_ID NUMBER, /* BOARD_ID */
   MEMBER_ID VARCHAR2(50) /* MEMBER_ID */
);

CREATE UNIQUE INDEX PK_REPLY
   ON REPLY (
      REPLY_ID ASC
   );

ALTER TABLE REPLY
   ADD
      CONSTRAINT PK_REPLY
      PRIMARY KEY (
         REPLY_ID
      );

/* ROLE */
CREATE TABLE ROLE (
   ROLE VARCHAR2(50) /* NAME */
);

CREATE UNIQUE INDEX PK_ROLE
   ON ROLE (
      ROLE ASC
   );

ALTER TABLE ROLE
   ADD
      CONSTRAINT PK_ROLE
      PRIMARY KEY (
         ROLE
      );

/* MEMBER_ROLE */
CREATE TABLE MEMBER_ROLE (
   MEMBER_ID VARCHAR2(50) NOT NULL, /* MEMBER_ID */
   ROLE VARCHAR2(50) NOT NULL /* ID */
);

CREATE UNIQUE INDEX PK_MEMBER_ROLE
   ON MEMBER_ROLE (
      MEMBER_ID ASC,
      ROLE ASC
);

ALTER TABLE MEMBER_ROLE
   ADD
      CONSTRAINT PK_MEMBER_ROLE
      PRIMARY KEY (
         MEMBER_ID,
         ROLE
);

ALTER TABLE BOARD
   ADD
      CONSTRAINT FK_BOARD_CATEGORY_ID
      FOREIGN KEY (
         TEAM_ID
      )
      REFERENCES BOARD_TEAM (
         TEAM_ID
      );

ALTER TABLE BOARD
   ADD
      CONSTRAINT FK_MEMBER_TO_BOARD
      FOREIGN KEY (
         MEMBER_ID
      )
      REFERENCES MEMBER (
         MEMBER_ID
      );

ALTER TABLE BOARD_UPLOAD_FILE
   ADD
      CONSTRAINT FK_BOARD_BOARD_ID
      FOREIGN KEY (
         BOARD_ID
      )
      REFERENCES BOARD (
         BOARD_ID
      )on delete cascade;
      
alter table BOARD_UPLOAD_FILE drop constraint FK_BOARD_BOARD_ID;

ALTER TABLE MEMBER
   ADD
      CONSTRAINT FK_BOARD_TEAM_TO_MEMBER
      FOREIGN KEY (
         TEAM_ID
      )
      REFERENCES BOARD_TEAM (
         TEAM_ID
      );

ALTER TABLE REPLY
   ADD
      CONSTRAINT FK_BOARD_TO_REPLY
      FOREIGN KEY (
         BOARD_ID
      )
      REFERENCES BOARD (
         BOARD_ID
      );

ALTER TABLE REPLY
   ADD
      CONSTRAINT FK_MEMBER_TO_REPLY
      FOREIGN KEY (
         MEMBER_ID
      )
      REFERENCES MEMBER (
         MEMBER_ID
      );

ALTER TABLE MEMBER_ROLE
   ADD
      CONSTRAINT FK_MEMBER_TO_MEMBER_ROLE
      FOREIGN KEY (
         MEMBER_ID
      )
      REFERENCES MEMBER (
         MEMBER_ID
      );

ALTER TABLE MEMBER_ROLE
   ADD
      CONSTRAINT FK_ROLE_TO_MEMBER_ROLE
      FOREIGN KEY (
         ID
      )
      REFERENCES ROLE (
         ID
      );

COMMIT;

----------------------------------------------------------------------------

-- 샘플 데이터베이스 생성

-- BOARD_TEAM 테이블 데이터
INSERT INTO BOARD_TEAM (TEAM_ID) VALUES (1);
INSERT INTO BOARD_TEAM (TEAM_ID) VALUES (2);

-- MEMBER 테이블 데이터
-- MEMBER 테이블 데이터
INSERT INTO MEMBER (MEMBER_ID, NAME, PASSWORD, EMAIL, TEAM_ID, ROLE) VALUES ('user1', 'John Doe', 'password123', 'john@example.com', 1, 'ADMIN');
INSERT INTO MEMBER (MEMBER_ID, NAME, PASSWORD, EMAIL, TEAM_ID, ROLE) VALUES ('user2', 'Jane Doe', 'password456', 'jane@example.com', 2, 'USER');

commit;

-- BOARD 테이블 데이터
INSERT INTO BOARD (BOARD_ID, TEAM_ID, TITLE, CONTENT, WRITE_DATE, MEMBER_ID) VALUES (1, 1, 'Board 1', 'Content of Board 1', SYSDATE, 'user1');
INSERT INTO BOARD (BOARD_ID, TEAM_ID, TITLE, CONTENT, WRITE_DATE, MEMBER_ID) VALUES (2, 2, 'Board 2', 'Content of Board 2', SYSDATE, 'user2');

-- BOARD_UPLOAD_FILE 테이블 데이터
INSERT INTO BOARD_UPLOAD_FILE (FILE_ID, BOARD_ID, FILE_NAME, FILE_SIZE, FILE_CONTENT_TYPE, FILE_DATA) VALUES (1, 1, 'file1.txt', 1024, 'text/plain', EMPTY_BLOB());
INSERT INTO BOARD_UPLOAD_FILE (FILE_ID, BOARD_ID, FILE_NAME, FILE_SIZE, FILE_CONTENT_TYPE, FILE_DATA) VALUES (2, 2, 'file2.txt', 2048, 'text/plain', EMPTY_BLOB());

-- REPLY 테이블 데이터
INSERT INTO REPLY (REPLY_ID, CONTENT, WRITE_DATE, BOARD_ID, MEMBER_ID) VALUES (1, 'Reply 1', SYSDATE, 1, 'user2');
INSERT INTO REPLY (REPLY_ID, CONTENT, WRITE_DATE, BOARD_ID, MEMBER_ID) VALUES (2, 'Reply 2', SYSDATE, 2, 'user1');

-- MEMBER_ROLE 테이블 데이터
INSERT INTO MEMBER_ROLE (MEMBER_ID, ID) VALUES ('user1', 1);
INSERT INTO MEMBER_ROLE (MEMBER_ID, ID) VALUES ('user2', 2);
commit;
-----------------------------------------------------------------------------------------------
SELECT COUNT(*) FROM BOARD;
SELECT MAX(BOARD_ID) FROM BOARD;
SELECT * FROM BOARD;
DELETE FROM board_team;
DELETE FROM BOARD WHERE board_id =2;
SELECT NVL(MAX(FILE_ID),0) FROM BOARD_UPLOAD_FILE